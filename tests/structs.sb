fn structs_main() {
    log_test_stage("Testing structs")
    test_initialization()
    test_simple_field_access()
    test_field_access_in_function_call()
    test_field_access_on_function()
    test_nested_structs()
    test_method_call()
    test_function_call_with_constructor()
    test_method_with_self_statement()
}

struct User {
    username: string
    first_name: string
    last_name: string

    fn full_name(): string {
        return self.first_name + self.last_name
    }
}

// Creates a stub user
fn user_stub() {
    let stub = new User {
        username: "Foo Bar"
        first_name: "Foo"
        last_name: "Bar"
    }

    assert(stub.first_name)
    assert(stub.last_name)
    return stub
}

fn test_initialization() {
    println("test_initialization")
    let foo = new User {
        username: "Foo Bar"
        first_name: "Bar"
        last_name: "Bar"
    }

    assert(foo)
}

fn test_simple_field_access() {
    let user: User = user_stub()
    user.username = "Foo Bar"
}

fn test_field_access_in_function_call() {
    let user: User = user_stub()
    user.username = "Bar"
    assert(user.username == "Bar")
}

fn test_field_access_on_function() {
    assert(user_stub().first_name == "Foo")
}

struct Foo {
    x: int
    bar: Bar
}

struct Bar {
    y: string
}

fn test_nested_structs() {
    let foo = new Foo {
        x: 5
        bar: new Bar {
            y: "Nested field"
        }
    }

    assert(foo.x == 5)
    println(foo.bar.y)
    assert(foo.bar.y == "Nested field")
}

fn test_method_call() {
    let user: User = user_stub()
    let full_name: string = user.full_name()

    assert(full_name, "FooBar")
}

fn assert_bar_y(bar: Bar) {
    assert(bar.y == "ABC")
}

fn test_function_call_with_constructor() {
    assert_bar_y(new Bar { y: "ABC" })
}

struct Self_test_struct {
    a: int

    fn bar() {
        self.a += 1 // <-- This caused problems (See #34)
        assert(true)
    }
}

fn test_method_with_self_statement() {
    let foo = new Self_test_struct { a: 5 }
    foo.bar()
}
